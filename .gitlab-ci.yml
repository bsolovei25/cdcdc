---
include:
  - project: 'oaovd/osspu/evj/infra/pipelines'
    file: '/pipelines/angular-pipelines.yml'
  # - project: "oaovd/osspu/evj/infra/pipelines"
  #   file: "/pipelines/angular-docker-helm-main.yml"

variables:
  # legacy
  S3_RELEASE_BUCKET: "gazgolder/release-tags/${CI_PROJECT_NAME}"

  # GLOBAL LVL
  GIT_DEPTH: 3
  IS_DEBUG_ENV: "true"
  IS_FETCH_REMOTE_DOCKERFILE: "true"
  CACHE_KEY: "$CI_PROJECT_NAME-$CI_PROJECT_ID-cache"
  # CACHE_KEY: "$CI_PROJECT_NAME-$CI_PROJECT_ID-$CI_COMMIT_REF_SLUG-cache"
  SR_CACHE_KEY: "$CI_PROJECT_NAME-$CI_PROJECT_ID-SR-cache"
  SKIP_BUILD: $SKIP_BUILD
  NO_FTP: $NO_FTP

  # CI STAGES LVL
  IS_DEPLOY_REVIEW: "true"
  IS_ALERTING: "true"
  UNIT_TESTS_ON: "true"
  HELM_DEPLOY_ON: "true"
  SEMVER_EXPORT_ON: "true"
  COMPILE_TARGET: "angular"
  
  
  # DOCKER BUILD LVL
  # DOCKERFILE_PACK: "./docker/Dockerfile.packing"
  DOCKERHUB_URL: "registry.funcoff.club"
  DOCKER_REPO: "cup"
  DOCKER_EXPORT_PULL_TAG: "latest"

  # service lvl
  SERVICE_NAME: "evj-front"
  EXTERNAL_DOCKER_IMG: "onpz.local/evj/evj-front"
  TAG: "$CI_RELEASE_TAG"
  
  # deploy lvl
  HELM_DEPLOY_WITH: "nexus"
  HELM_RELEASE: "asplatform-front"
  HELM_NS: "evj"
  HELM_INGRESS_DOMAIN: "funcoff.club"
  HELM_INGRESS_PREFIX: "evj"
  HELM_SUBCHART_NAME: "evj"
  HELM_NEXUS_CHART: "asplatform-front"
  HELM_NEXUS_CHART_VERSION: "1.0.0"
  HELM_NEXUS_REGISTRY: "helm-gazgolder"
  HELM_VALUES_OVERRIDE: "./ci/evj.gazgolder.yaml"
  HELM_EXTRA_FLAGS: ""

  # fetching Dockerfile from remote repo 
  FETCH_PROJECT_ID: "184"
  FETCH_PATH: "builds%2Fangular%2F"
  FETCH_FILE: "Dockerfile.nginx-rhel-v2"
  FETCH_REF: "/raw?ref=master"

  # ALERTING
  ROCKETCHAT_PUBLISH_SUCCESS: "*${SERVICE_NAME}* / *New build coming*. Deploying on funcoff.club ->"
  ROCKETCHAT_PUBLISH_FAIL: "*BUILD ${SERVICE_NAME} FAILED*. See details below ->"
  ROCKETCHAT_RELEASE_SUCCESS: "*New release ${SERVICE_NAME} coming*. Uploaded to gpn-ftp ->"
  ROCKETCHAT_RELEASE_FAIL: "*RELEASE ${SERVICE_NAME} FAILED*. See details below ->"

  ## semver controlling variables
  SR_MANUAL_TAG_RELEASE: "false"
  SR_IS_COMPILE: "true"
  SR_COMPILE_TARGET: "angular"
  SR_IS_MAKE_DOCKER_IMG: "true"
  SR_IS_EXPORTING: "true"
  SR_IS_ALERTING: "true"
  SR_SEMVER_RELEASE_DRY_RUN: "false"
  EXTERNAL_REGISTRY: "oms02-nex01.gazprom-neft.local:5000/asplatform"


stages:
  - restore
  - build-n-test
  - pack-n-push
  - deploy
  - alerting
  - release


.default_rules_refs_anchor: &default_rules_refs
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "devops"

deliver-to-deploy:
  extends: .alpine-ssh-base
  stage: deploy
  variables:
    DEPLOY_DOMAIN: 192.168.0.23
    GIT_STRATEGY: none
    DEPLOY_PATH: "/var/www/angular-staging.local/public"
    CMD_REPLACE: sed -i -E "s/(<title>Evj)(<\/title>)/\1 | ${CI_COMMIT_SHORT_SHA} \2/g" /var/www/angular.local/public/index.html
  needs:
    - job: ng-build
      artifacts: true
  before_script:
    - cat /etc/hosts
  script:
    - ssh root@${DEPLOY_DOMAIN} rm -rf $DEPLOY_PATH
    - mv ./dist/evj public
    - scp -r ./public root@${DEPLOY_DOMAIN}:${DEPLOY_PATH//\/public}
    - ssh root@${DEPLOY_DOMAIN} $CMD_REPLACE
    - ssh root@${DEPLOY_DOMAIN} nginx -s reload
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "devops"


release-notes-maker:
  extends: .release-notes-tpl
  variables:
    GROUP_PROJECT_ID: 55
  stage: release
  needs: []
  dependencies: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline" && $RUN_FROM == "release"
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
      when: manual

export-to-ftp:
  stage: release
  needs: []
  variables:
    SKIP_BUILD: $SKIP_BUILD
    # DOCKERHUB_URL: "nexus.funcoff.club"
    # DOCKER_REPO: "asplatform"
  trigger:
    include:
      - project: "oaovd/osspu/evj/infra/pipelines"
        file: "/pipelines/semantic-release.yml"
  rules:
    - if: $SEMVER_EXPORT_ON == "false"
      when: never
    - if: $CI_PIPELINE_SOURCE == "pipeline" && $RUN_FROM == "release"
      when: never
    - if: $CI_COMMIT_BRANCH == "devops" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master"
      when: manual
      allow_failure: true


export-to-ftp-no-build:
  stage: release
  needs: []
  variables:
    SKIP_BUILD: "true"
  trigger:
    include:
      - project: "oaovd/osspu/evj/infra/pipelines"
        file: "/pipelines/semantic-release.yml"
  rules:
    - if: $SEMVER_EXPORT_ON == "false"
      when: never
    - if: $CI_PIPELINE_SOURCE == "pipeline" && $RUN_FROM == "release"
      when: never
    - if: $CI_COMMIT_BRANCH == "devops" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master"
      when: manual
      allow_failure: true

semantic-release:
  stage: release
  needs: []
  variables:
    SKIP_BUILD: "true"
    SR_IS_EXPORTING: "false"
  trigger:
    include:
      - project: "oaovd/osspu/evj/infra/pipelines"
        file: "/pipelines/semantic-release.yml"
  rules:
    - if: $SEMVER_EXPORT_ON == "false"
      when: never
    - if: $CI_PIPELINE_SOURCE == "pipeline" && $RUN_FROM == "release"
      when: never
    - if: $CI_COMMIT_BRANCH == "devops" || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master"
      when: manual
      allow_failure: true
