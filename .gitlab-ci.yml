---
include:
  - ci/build.yml
  - ci/deploy.yml

variables:
  GIT_DEPTH: 8
  #DOCKER_HOST: tcp://docker:2375
  ## This will instruct Docker not to start over TLS.
  #DOCKER_TLS_CERTDIR: ""
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1 
  DOCKER_DRIVER: overlay2
  # Registry configs
  GIT_SSL_NO_VERIFY: "1"
  SCP_HOST: root@${DEPLOY_DOMAIN}
  ROCKETCHAT_HOOKS: "/home/gitlab-runner/rocket.integrations"
  DYNAMIC_ENV: "/root/dynamic-environment-creator"

stages:
    - prebuild
    - test
    - build
    - packing
    - deploy-review
    - staging
    - export-images
    - deploy
    - alerting
    - release
    - clean-on-failure

.init_template: &init
    tags:
        - build2-cup-front

install_dependencies:
  stage: prebuild
  image: registry.funcoff.club/libs/node:slim
  tags:
    - gl-docker-socket
  cache: 
    key: one-key-to-rule-them-all
    paths:
      - node_modules/
  script:
    - npm ci
  only:
    changes:
      - package.json

ng-build:
  extends: .ng-build
  cache: 
    #key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR
    key: one-key-to-rule-them-all
    paths:
      - node_modules/
  after_script:
    - echo ${DOCKER_IMG}
  only:
    - merge_requests
    - develop
    - devops

docker-packing-tst:
  extends: .packing
  variables:
    SERVICE_NAME: "front"
  only:
    - merge_requests
    - devops
    - develop

deploy-front:
  extends: .deploy-to-k8s
  variables:
    NS: "evj"
    IMG_VERSION: "latest"
    CHART: "./ci/front-chart"
    RELEASE: "front"
    DEPLOY_DOMAIN: "https://evj.funcoff.club"
    INGRESS_SITE: "evj"
  dependencies: []
  environment:
    name: staging
    url: "https://evj.funcoff.club"
  only:
    - devops
    - develop
    - master

deliver-to-deploy:
  extends: .packing 
  stage: deploy
  image:
    name: gitlab.funcoff.club:4567/oaovd/osspu/evj/back/runners:alpine
  variables:
    DEPLOY_DOMAIN: deploy.funcoff.club
    GIT_STRATEGY: none
    DEPLOY_PATH: "/var/www/angular.local/public"
    CMD_REPLACE: sed -i -E "s/(<title>Evj)(<\/title>)/\1 | ${CI_COMMIT_SHORT_SHA} \2/g" /var/www/angular.local/public/index.html
  script:
    - ssh root@${DEPLOY_DOMAIN} rm -rf $DEPLOY_PATH
    - mv ./dist/evj public
    - scp -r ./public root@${DEPLOY_DOMAIN}:${DEPLOY_PATH//\/public}
    - ssh root@${DEPLOY_DOMAIN} $CMD_REPLACE
      #- ssh root@${DEPLOY_DOMAIN} nginx -s reload
  only:
    - develop
    - devops
      
deploy-front-mr:
  extends: .deploy-to-k8s
  variables:
    NS: "evj-${CI_COMMIT_REF_SLUG}"
    IMG_VERSION: "${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    CHART: "./ci/front-chart"
    RELEASE: "front"
    DEPLOY_DOMAIN: "https://evj-${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}.funcoff.club"
    INGRESS_SITE: "evj-${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
  dependencies: []
  environment:
    name: review/${CI_COMMIT_REF_SLUG}
    url: "https://evj-${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}.funcoff.club"
    on_stop: stop-k8s-review
  only:
    - merge_requests

stop-k8s-review:
  extends: .deploy-to-k8s 
  variables:
    GIT_STRATEGY: none
    NS: "evj-${CI_COMMIT_REF_SLUG}"
  only:
      - merge_requests
  script:
    - kubectl version
    - kubectl delete ns ${NS} || true
  when: manual
  environment:
    name: review/${CI_COMMIT_REF_SLUG}
    action: stop
      
success-pipelines:
  tags:
    - gl-docker-socket
  stage: alerting
  image:
    name: registry.funcoff.club/devops/rockethooks:latest
  variables:
    DEPLOY_DOMAIN: deploy.funcoff.club
    GIT_STRATEGY: none
    HOOKS: "/app/rockethooks.py"
  dependencies: []
  script:
    - python $HOOKS
  only:
    - develop
    - devops

failed-pipelines:
  stage: alerting
  tags:
    - gl-docker-socket
  image:
    name: registry.funcoff.club/devops/rockethooks:latest
  variables:
    DEPLOY_DOMAIN: deploy.funcoff.club
    GIT_STRATEGY: none
    HOOKS: "/app/rockethooks.py"
  dependencies: []
  script:
    - python $HOOKS failed
  when: on_failure

export to zyfra:
  extends: .deploy-to-zyfra
  variables:
    GIT_STRATEGY: none
    SERVICE_NAME: "frontend"
    EXTERNAL_DOCKER_IMG: "onpz.local/evj/frontend"
  only:
    - devops-zyfra
    - devops
    - develop

.docker build:
    <<: *init
    stage: prebuild
    script:
        - echo "Prebuild checking... Getting docker container rdy."
        - docker container stop ${CI_PROJECT_NAME} || sleep 0.1
        - docker build . -t ${CI_PROJECT_NAME} -f Dockerfile.prod
        - docker stop ${CI_PROJECT_NAME} || sleep 0.1
        - docker container rm ${CI_PROJECT_NAME} || sleep 0.1
        - docker run --rm --name ${CI_PROJECT_NAME} -d ${CI_PROJECT_NAME} ; docker exec ${CI_PROJECT_NAME} ng build
        - docker cp ${CI_PROJECT_NAME}:/app/dist/evj ./public
        - docker container stop ${CI_PROJECT_NAME} || sleep 0.1
    artifacts:
        paths:
            - ./public
    only:
        - merge_requests


.testing website:
    <<: *init
    stage: test
    script:
        - echo "Doing some tests... Someone should add unit tests or whatever here"
        - ls
    only:
        - merge_requests

.build artifact:
    <<: *init
    stage: build
    script:
        - docker build . -t ${CI_PROJECT_NAME}_prod -f Dockerfile.prod
        - docker stop ${CI_PROJECT_NAME}_prod || sleep 0.1
        - docker container rm ${CI_PROJECT_NAME}_prod || sleep 0.1
        - docker run --rm --name ${CI_PROJECT_NAME}_prod  -d ${CI_PROJECT_NAME}_prod ; docker exec ${CI_PROJECT_NAME}_prod ng build --prod
        - docker cp ${CI_PROJECT_NAME}_prod:/app/dist/evj ./public
        - docker container stop ${CI_PROJECT_NAME}_prod
    only:
        - master
        - develop
    artifacts:
        paths:
            - ./public

.deploy review:
    <<: *init
    stage: deploy-review
    script:
        - sed -i -E "s/(<title>Evj)(<\/title>)/\1  |  ${CI_COMMIT_SHORT_SHA}\2/g" ./public/index.html
        - scp -r ./public root@${DEPLOY_DOMAIN}:/root/dynamic-environment-creator
        - ssh ${SCP_HOST} "cd /root/dynamic-environment-creator ; git pull origin master --no-edit ; python3 main.py -d create -e $CI_COMMIT_REF_SLUG"
        - scp ${SCP_HOST}:/root/dynamic-environment-creator/deploy.env .
        - ssh ${SCP_HOST} "nginx -s reload"
    artifacts:
        reports:
            dotenv: deploy.env 
    only:
        - merge_requests
    environment:
        name: review/${CI_COMMIT_REF_SLUG}
        url: https://$DYNAMIC_ENVIRONMENT_URL
        on_stop: stop-review

.stop-review:
    <<: *init
    variables:
        GIT_STRATEGY: none
    stage: deploy-review
    only:
        - merge_requests
    script:
        - ssh ${SCP_HOST} "cd /root/dynamic-environment-creator ; python3 main.py -d destroy -e $CI_COMMIT_REF_SLUG"
    when: manual
    environment:
        name: review/${CI_COMMIT_REF_SLUG}
        action: stop

.staging:
    <<: *init
    stage: staging
    environment:
        name: staging
        url: http://${DEPLOY_DOMAIN}:88
    variables:
        CMD_REPLACE: sed -i -E "s/(<title>Evj)(<\/title>)/\1 | ${CI_COMMIT_SHORT_SHA} \2/g" /var/www/angular-staging.local/public/index.html
    script:
        - env
        - ssh root@${DEPLOY_DOMAIN} rm -rf /var/www/angular-staging.local/public
        - scp -r ./public root@${DEPLOY_DOMAIN}:/var/www/angular-staging.local
        - ssh root@${DEPLOY_DOMAIN} $CMD_REPLACE
        - ssh root@${DEPLOY_DOMAIN} "sed -i  's/:5555/:6555/g' /var/www/angular-staging.local/public/assets/config.json || sleep 0.1"
        - ssh root@${DEPLOY_DOMAIN} nginx -s reload
        - cd ${ROCKETCHAT_HOOKS} ; git pull origin master --no-edit ; python3 rockethooks.py
    only:
        - develop


.prod:
    <<: *init
    stage: deploy
    environment:
        name: prod
        url: http://${DEPLOY_DOMAIN}:80
    variables:
        CMD_REPLACE: sed -i -E "s/(<title>Evj)(<\/title>)/\1 | ${CI_COMMIT_SHORT_SHA} \2/g" /var/www/angular.local/public/index.html
    script:
        - ssh root@${DEPLOY_DOMAIN} rm -rf /var/www/angular.local/public
        - scp -r ./public root@${DEPLOY_DOMAIN}:/var/www/angular.local
        - ssh root@${DEPLOY_DOMAIN} $CMD_REPLACE
        - ssh root@${DEPLOY_DOMAIN} "sed -i  's/:6555/:5555/g' /var/www/angular.local/public/assets/config.json || sleep 0.1"
        - ssh root@${DEPLOY_DOMAIN} nginx -s reload
    only:
        - master

.release maker:
    <<: *init
    stage: release
    script:
        - env
        - cd ./release_notes
        - python3 release-notes.py
        - bash upload_release.sh
    only:
        - master
    when:
        manual


.clean on failure:
    <<: *init
    stage: clean-on-failure
    script:
        - docker container stop ${CI_PROJECT_NAME} || sleep 0.1
          #- cd ${ROCKETCHAT_HOOKS} ; python3 rockethooks.py failed
    when: on_failure
